<div id="post" class="mt-5 m-2">
  <!-- ツールバー -->
  <div class="toolbar mb-2 flex justify-between items-center">
    <div class="flex space-x-2">
      <button type="button" class="px-4 py-2 rounded-md bg-gray-100 border border-gray-300 hover:bg-gray-200" id="bold-button">
        <strong>B</strong>
      </button>
    </div>
    <div class="text-sm text-gray-600" id="char-count">0 / 1000</div>
  </div>

  <!-- フォーム -->
  <%= form_with(model: @micropost, url: zen_create_path(slug: @user.slug), method: :post, local: true, html: { class: "micropost-form" }) do |f| %>
    <div class="field">
      <!-- 編集エリア -->
      <div
        id="editor"
        contenteditable="true"
        class="p-4 rounded border shadow-md hover:shadow-lg transition-shadow duration-300 w-full h-[400px]"
        data-placeholder="I don't think anything is hard. It just takes time."
        style="min-height: 100px; overflow-y: auto;"
      ></div>
      
      <!-- 隠しフィールド（フォーム送信時にエディタの内容を保存） -->
      <%= f.hidden_field :content, id: "hidden_content" %>
    </div>

    <!-- 送信ボタン -->
    <div class="actions text-right mt-2">
    <button
      class="px-4 py-2 bg-gray-200 text-gray-500 border border-gray-300 
             rounded-md cursor-not-allowed
             disabled:hover:bg-gray-200 disabled:opacity-50"
      disabled>
      🤖AI
    </button>
  <% unless current_page?(camera_path) %>
    <button class="hover:bg-yellow-500 px-4 py-2 bg-gray-100 border border-gray-300 text-gray-700 
                   hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 
                   focus:ring-gray-300 rounded-md">
      <%= link_to "📸 手書きを読み取る", camera_path(@user), class: "submit-button text-dark text-decoration-none" %>
    </button>
  <% end %>


    <%= f.submit "📝 下書き保存", name: "draft", class: "hover:bg-yellow-500 px-4 py-2 bg-gray-200 border border-gray-300 text-gray-800 
               hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 
               focus:ring-gray-400 rounded-md" %>

    <%= f.submit "post", class: "hover:bg-yellow-500 px-4 py-2 bg-gray-200 border border-gray-300 text-gray-800 
               hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 
               focus:ring-gray-400 rounded-md" %>
  </div>

  <% end %>
</div>

<!-- プレースホルダー用CSS -->
<style>
  [data-placeholder]:empty::before {
    content: attr(data-placeholder);
    color: #aaa;
    pointer-events: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const boldButton = document.getElementById('bold-button');
    const editor = document.getElementById('editor');
    const hiddenContent = document.getElementById('hidden_content');
    const charCount = document.getElementById('char-count');
    const MAX_CHARS = 1000;

    // 編集エリアの内容を隠しフィールドに同期
    function syncContent() {
      hiddenContent.value = editor.innerHTML;
    }

    // 文字数をカウントして表示
    function updateCharCount() {
      const text = editor.innerText || ""; // プレーンテキストのみを取得
      const currentCount = text.length;
      
      charCount.textContent = `${currentCount} / ${MAX_CHARS}`;
      if (currentCount > MAX_CHARS) {
        charCount.classList.add('text-red-500');
        editor.innerText = text.substring(0, MAX_CHARS); // 超過分をカット
      } else {
        charCount.classList.remove('text-red-500');
      }
    }

    // 太字ボタンのクリックイベント
    boldButton.addEventListener('click', function (event) {
      event.preventDefault();
      document.execCommand('bold'); // 太字を適用
      syncContent(); // 隠しフィールドを更新
      updateCharCount(); // 文字数カウントを更新
    });

    // 編集エリアの入力イベント
    editor.addEventListener('input', function () {
      syncContent();
      updateCharCount();
    });

    // 初期文字数カウントを更新
    updateCharCount();
  });
</script>
